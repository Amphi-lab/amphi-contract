{
	"id": "298e9b14f64433ae2112f4e3e742f0f7",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.7",
	"solcLongVersion": "0.8.7+commit.e28d00a7",
	"input": {
		"language": "Solidity",
		"sources": {
			"TransMainService.sol": {
				"content": "// // SPDX-License-Identifier: MIT\r\n// pragma solidity ^0.8.0;\r\n// import \"./LibProject.sol\";\r\n// import \"./utils/calculateUtils.sol\";\r\n// import \"./TransService.sol\";\r\n// //import \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\";\r\n// contract TransMainService is TransService{\r\n//     //增加项目\r\n//     function addProject(LibProject.ProParm memory _t)  public returns(uint256) {\r\n//        _addCount();\r\n//        //  taskIndex[_buyer].push(count);\r\n//         LibProject.TranslationPro storage _pro= taskList[count];\r\n//         _pro.releaseTime = _t.releaseTime;\r\n//         _pro.introduce = _t.introduce;\r\n//         _pro.need=_t.need;\r\n//         _pro.deadline=_t.deadline;\r\n//         _pro.sourceLanguage=_t.sourceLanguage;\r\n//         _pro.goalLanguage=_t.goalLanguage;\r\n//         _pro.preferList = _t.preferList;\r\n//         _pro.translationType=_t.translationType;\r\n//         _pro.workLoad = _t.workLoad;\r\n//         _pro.bounty=_t.bounty;\r\n//         _pro.isNonDisclosure = _t.isNonDisclosure;\r\n//         _pro.isCustomize = _t.isCustomize;\r\n//         _pro.state = LibProject.ProjectState.Published;\r\n//         _pro.maxT = _t.maxT;\r\n//         _pro.maxV = _t.maxV;\r\n//         _pro.isTransActive = true;\r\n//         _pro.isVerActive = true;\r\n//         _pro.state = LibProject.ProjectState.Published;\r\n//         for(uint256 i=0;i< _t.tasks.length;i++) {\r\n//             _pro.tasks.push(_t.tasks[i]);\r\n//         }\r\n//         emit addProjectEv(msg.sender,count,_t);\r\n//         return count;\r\n//     }\r\n//         function updateProject(uint256 _index,LibProject.ProParm memory _t)  public onlyBuyer(_index){\r\n//         LibProject.TranslationPro storage _pro= taskList[_index];\r\n//         _pro.releaseTime = _t.releaseTime;\r\n//         _pro.introduce = _t.introduce;\r\n//         _pro.need=_t.need;\r\n//         _pro.deadline=_t.deadline;\r\n//         _pro.sourceLanguage=_t.sourceLanguage;\r\n//         _pro.goalLanguage=_t.goalLanguage;\r\n//         _pro.preferList = _t.preferList;\r\n//         _pro.translationType=_t.translationType;\r\n//         _pro.workLoad = _t.workLoad;\r\n//         _pro.bounty=_t.bounty;\r\n//         _pro.isNonDisclosure = _t.isNonDisclosure;\r\n//         _pro.isCustomize = _t.isCustomize;\r\n//         _pro.state = LibProject.ProjectState.Published;\r\n//         _pro.maxT = _t.maxT;\r\n//         _pro.maxV = _t.maxV;\r\n//         _pro.isTransActive = true;\r\n//         _pro.state = LibProject.ProjectState.Published;\r\n//         for(uint256 i=0;i< _t.tasks.length;i++) {\r\n//             _pro.tasks.push(_t.tasks[i]);\r\n//         }\r\n//         emit updateProjectEv(_index,_t);\r\n//     }\r\n//     //修改项目状态\r\n//     function updateState(uint256 _index, LibProject.ProjectState _state) public {\r\n//         taskList[_index].state = _state;\r\n//         emit updateProSateEv(_index,_state);\r\n//     }\r\n//     //修改文件状态\r\n//     function updateFileStateAndTime(uint256 _index,uint256 _fileIndex,LibProject.FileState _state) public {\r\n//         LibProject.TaskInfo storage _task= taskList[_index].tasks[_fileIndex];\r\n//         _task.state = _state;\r\n//         _task.lastUpload = block.timestamp;\r\n//         emit updateFileStateAndTimeEv(_index,_fileIndex,msg.sender,_state);\r\n//     }\r\n//     //修改任务者状态\r\n//     function updateTaskerState(uint256 _index,uint256 _taskerIndex,uint256 _stateIndex,LibProject.TaskerState _state, bool _isTrans) public {\r\n//         if(_isTrans){\r\n//             taskList[_index].translators[_taskerIndex].states[_stateIndex] = _state;\r\n//         }else{\r\n//            taskList[_index].verifiers[_taskerIndex].states[_stateIndex] = _state;\r\n//         }\r\n\r\n//        emit updateTaskerStateEv(_index,_taskerIndex,_stateIndex,msg.sender,_state,_isTrans);\r\n//     }\r\n//     //修改/上传任务文件\r\n//     function updateFileInfo(uint256 _index,uint256 _taskerIndex,uint256 _fileIndex,string memory _fileInfo,bool _isTrans) public {\r\n//         if(_isTrans){\r\n//            taskList[_index].translators[_taskerIndex].files[_fileIndex] = _fileInfo;\r\n//         }else{\r\n//             taskList[_index].verifiers[_taskerIndex].files[_fileIndex] = _fileInfo;\r\n//         }\r\n//         emit updateFileInfoEv(_index,_taskerIndex,_fileIndex,msg.sender,_fileInfo,_isTrans);\r\n//     }\r\n//     function closeTransAccept(uint256 _index) public {\r\n//         taskList[_index].isTransActive = false;\r\n//         emit uploadAcceptStateEv(msg.sender, _index,\"ts\",false);\r\n//     }\r\n//     function closeVfAccept( uint256 _index) public {\r\n//         taskList[_index].isVerActive = false;\r\n//          emit uploadAcceptStateEv(msg.sender, _index,\"vf\",false);\r\n//     }\r\n//     function openTransAccept( uint256 _index) public {\r\n//         taskList[_index].isTransActive = true;\r\n//          emit uploadAcceptStateEv(msg.sender, _index,\"ts\",true);\r\n//     }\r\n//     function openVfAccept( uint256 _index) public {\r\n//         taskList[_index].isVerActive = true;\r\n//          emit uploadAcceptStateEv(msg.sender, _index,\"ts\",true);\r\n//     }\r\n//     //翻译者接收任务\r\n//     function acceptTrans(uint256 _index,uint256[] memory _fileIndex, uint256 _taskerIndex,address _tasker) public isCanAcceptTrans(_index) {\r\n//        //若_taskerIndex为0，说明该任务者是首次接收该任务\r\n//        if(_taskerIndex==0) {\r\n//             LibProject.Tasker[] storage _taskerList= taskList[_index].translators;\r\n//            LibProject.Tasker memory _taskerInfo;\r\n           \r\n//            _taskerInfo.taskerAddress = _tasker;\r\n//            _taskerInfo.taskIndex = _fileIndex;\r\n//            for(uint256 i=0;i<_fileIndex.length;i++){\r\n//                uint256 _bounty=getProjectOne(_index).tasks[i].bounty;\r\n//                _taskerInfo.bounty+= CalculateUtils.getTaskTrans(_bounty);\r\n//            }\r\n//            _taskerList.push(_taskerInfo);\r\n//            emit acceptTaskEv(_index,_fileIndex,_taskerList.length-1,_tasker,\"translator\");\r\n//        }else{\r\n//            LibProject.Tasker storage _taskerInfo = taskList[_index].translators[_taskerIndex];\r\n//            for(uint256 i=0;i<_fileIndex.length;i++) {\r\n//                _taskerInfo.taskIndex.push(_fileIndex[i]);\r\n//            }\r\n//            emit acceptTaskEv(_index,_fileIndex,_taskerIndex,_tasker,\"translators\");\r\n//        }\r\n//        if(isFull(_index,true)) {\r\n//            closeTransAccept(_index);\r\n//        }\r\n//     }\r\n//     function acceptTrans(uint256 _index,uint256  _fileIndex, uint256 _taskerIndex,address _tasker) public  isCanAcceptTrans(_index){\r\n//            LibProject.Tasker storage _taskerInfo = taskList[_index].translators[_taskerIndex];\r\n//                _taskerInfo.taskIndex.push(_fileIndex);\r\n//                uint256 _bounty=getProjectOne(_index).tasks[_fileIndex].bounty;\r\n//                _taskerInfo.bounty+= CalculateUtils.getTaskTrans(_bounty);\r\n\r\n//            emit acceptTaskEv(_index,_fileIndex,_taskerIndex,_tasker,\"translators\");\r\n//     }\r\n//      //校验者接收任务\r\n//     function acceptVf(uint256 _index,uint256[] memory _fileIndex, uint256 _taskerIndex,address _tasker) public isCanAcceptVf(_index) {\r\n//        if(_taskerIndex==0) {\r\n//             LibProject.Tasker[] storage _taskerList= taskList[_index].verifiers;\r\n//            LibProject.Tasker memory _taskerInfo; \r\n//            _taskerInfo.taskerAddress = _tasker;\r\n//            _taskerInfo.taskIndex = _fileIndex;\r\n//            for(uint256 i=0;i<_fileIndex.length;i++){\r\n//                uint256 _bounty=getProjectOne(_index).tasks[i].bounty;\r\n//                _taskerInfo.bounty+= CalculateUtils.getTaskVf(_bounty);\r\n//            }\r\n//            _taskerList.push(_taskerInfo);\r\n//            emit acceptTaskEv(_index,_fileIndex,_taskerList.length-1,_tasker,\"verifiers\");\r\n//        }else{\r\n//            LibProject.Tasker storage _taskerInfo = taskList[_index].verifiers[_taskerIndex];\r\n//            for(uint256 i=0;i<_fileIndex.length;i++) {\r\n//                _taskerInfo.taskIndex.push(_fileIndex[i]);\r\n//            }\r\n//            emit acceptTaskEv(_index,_fileIndex,_taskerIndex,_tasker,\"verifiers\");\r\n//        }\r\n//        if(isFull(_index,false)) {\r\n//            closeTransAccept(_index);\r\n//        }\r\n//     }\r\n//     function acceptVf(uint256 _index,uint256  _fileIndex, uint256 _taskerIndex,address _tasker) public  isCanAcceptVf(_index) {\r\n//            LibProject.Tasker storage _taskerInfo = taskList[_index].verifiers[_taskerIndex];\r\n//                _taskerInfo.taskIndex.push(_fileIndex);\r\n//            uint256 _bounty=getProjectOne(_index).tasks[_fileIndex].bounty;\r\n//                _taskerInfo.bounty+= CalculateUtils.getTaskVf(_bounty);\r\n//            emit acceptTaskEv(_index,_fileIndex,_taskerIndex,_tasker,\"verifiers\");\r\n//     }\r\n    \r\n// }"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"errors": [
			{
				"component": "general",
				"errorCode": "3420",
				"formattedMessage": "Warning: Source file does not specify required compiler version! Consider adding \"pragma solidity ^0.8.7;\"\n--> TransMainService.sol\n\n",
				"message": "Source file does not specify required compiler version! Consider adding \"pragma solidity ^0.8.7;\"",
				"severity": "warning",
				"sourceLocation": {
					"end": -1,
					"file": "TransMainService.sol",
					"start": -1
				},
				"type": "Warning"
			}
		],
		"sources": {
			"TransMainService.sol": {
				"ast": {
					"absolutePath": "TransMainService.sol",
					"exportedSymbols": {},
					"id": 1,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [],
					"src": "8812:0:0"
				},
				"id": 0
			}
		}
	}
}